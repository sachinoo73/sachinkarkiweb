knitr::opts_chunk$set(echo = TRUE)
library(tidytext)
library(dplyr)
library(tidyverse)
library(wordcloud)
library(wordcloud2)
library(reshape2)
library(topicmodels)
library(ggplot2)
library(ggstatsplot)
library(tidymodels)
library(funModeling)
library(skimr)
library(DataExplorer)
library(haven)
reviews <- read_csv("data/clean/reviews.csv")
alreviews <- reviews %>%
mutate(comments = gsub(x = comments, pattern = "[^[:alpha:]]", " "))
tidyreviews <- alreviews %>%
group_by(listing_id) %>%
unnest_tokens(word,comments) %>%
group_by(word) %>%
filter(n()>5) %>%
ungroup()
tidytext::stop_words
cleanreviews <- tidyreviews %>%
anti_join(stop_words)
reviewsentiment <- cleanreviews %>%
filter() %>%
group_by(word) %>%
dplyr::summarise(frequency=n())
reviewsentiment %>% wordcloud2()
review_affin_lexicon <- reviewsentiment %>%
dplyr::select(word) %>%
inner_join(get_sentiments("afinn")) %>%
mutate(sentiment=ifelse(value>0,"positive","negative"),score=value)
review_affin_lexicon
ggplot(review_affin_lexicon,aes(x=reorder(word,score),y=score,colour=sentiment,fill=sentiment))+
geom_col(alpha=0.5)+
coord_flip()
review_bing_lexicon <- reviewsentiment %>%
inner_join(get_sentiments("bing")) %>%
dplyr::count(word,sentiment,frequency,sort=TRUE) %>%
acast(word~sentiment,value.var="frequency",fill=0) %>%
comparison.cloud(max.words = 150)
#Term frequencies across essays
tidy_review <- select_(alreviews,"comments")
n <- nrow(tidy_review)
tidy_review <- data_frame(review=1:n, text=reviews$comments)
# Tokenize, remove stop words and NAs
data("stop_words")
#  Add some custom stop words, just to illstrate
myterms <- c("airbnb","very","stay", "singapore", "host") #can build model to add in custom stopwords?
mylex <- rep("custom", length(myterms))
myStopwords <- data.frame(word=myterms, lexicon=mylex)
myStopwords <- rbind(stop_words, myStopwords)
#Term frequencies across essays
review_words <- tidy_review %>%
unnest_tokens(word, text) %>%
anti_join(myStopwords) %>%
count(review, word, sort=TRUE) %>%
ungroup()
total_words <- review_words %>%
group_by(review) %>%
summarize(total = sum(n))
#Term frequencies across essays
tidy_review <- select_(alreviews,"comments")
n <- nrow(tidy_review)
tidy_review <- data_frame(review=1:n, text=reviews$comments)
# Tokenize, remove stop words and NAs
data("stop_words")
#  Add some custom stop words, just to illstrate
myterms <- c("airbnb","very","stay", "singapore", "host") #can build model to add in custom stopwords?
mylex <- rep("custom", length(myterms))
myStopwords <- data.frame(word=myterms, lexicon=mylex)
myStopwords <- rbind(stop_words, myStopwords)
#Term frequencies across essays
review_words <- tidy_review %>%
unnest_tokens(word, text) %>%
anti_join(myStopwords) %>%
count(review, word, sort=TRUE) %>%
ungroup()
total_words <- review_words %>%
group_by(review) %>%
summarize(total = sum(n))
reviews <- read_csv("data/clean/reviews.csv")
plot_num(ex_listing, bins = 12)
listings1 <- listings %>% group_by(neighbourhood_cleansed, neighbourhood_group_cleansed) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
ungroup() %>%
mutate(rank = rank(desc(n))) %>%
filter(rank <31)
reviews <- read_csv("data/clean/reviews.csv")
listing <- read_csv("data/clean/listing.csv")
listing <- read_csv("data/clean/listing_en.csv")
listings <- read_csv("data/clean/listing_en.csv")
verified_listings <- listings %>% drop_na(host_identity_verified)
ggplot(verified_listings, aes(x = host_identity_verified, y = review_scores_rating)) +
geom_point(position=position_jitter(width=0.2, height=0.1)) +
geom_boxplot(outlier.colour=NA, fill=NA, colour="grey20")
ggbetweenstats(
data = verified_listings,
x = host_identity_verified,
y = review_scores_rating
)
listings1 <- listings %>% group_by(neighbourhood_cleansed, neighbourhood_group_cleansed) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
ungroup() %>%
mutate(rank = rank(desc(n))) %>%
filter(rank <31)
ggplot(listings1, aes(x = reorder(neighbourhood_cleansed, n), y = n, fill = neighbourhood_group_cleansed)) +
geom_col() +
coord_flip()
listing2 <- listings %>% mutate(price = gsub(x = price, pattern = "[$]", ""))
listing2$price <- as.numeric(as.character(listing2$price))
ggplot(listing2, aes(x = price)) +
geom_histogram(fill = 'light blue')
ggplot(listing2, aes(x = host_is_superhost)) +
geom_histogram(fill = 'light blue')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'light blue')
ex_listing <- listing2 %>%
select(-listing_url, -scrape_id, -last_scraped, -picture_url, -host_url, -host_thumbnail_url, -host_picture_url, -license, -description_lang, -calendar_last_scraped, -host_verifications, -host_id, -host_location, -calendar_updated, -first_review, -last_review, -availability_30, -availability_60, -availability_90, -availability_365, -has_availability, -minimum_nights, -maximum_maximum_nights, -minimum_minimum_nights, -host_name, -host_has_profile_pic, -neighbourhood, -bathrooms, -bathrooms_text, -listing_id, - latitude, -longitude, -bedrooms, -beds, -accommodates, -maximum_nights,-maximum_minimum_nights, minimum_maximum_nights, -minimum_nights_avg_ntm, maximum_nights_avg_ntm, -number_of_reviews_l30d, number_of_reviews_ltm, -review_scores_accuracy, -review_scores_checkin, -review_scores_cleanliness, -review_scores_cleanliness, -review_scores_communication, -review_scores_location, -review_scores_value, -reviews_per_month)
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'light blue')
glimpse(listing2)
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_count(fill = 'light blue')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_count(fill = 'light blue')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'light blue')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'light blue', stat = 'count')
ex_listing %>% drop_na(host_is_superhost)
ex_listing <- ex_listing %>% drop_na(host_is_superhost)
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'light blue', stat = 'count')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'red', stat = 'count')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'pink', stat = 'count')
geom_histogram(fill = 'violetred, stat = 'count')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'violetred', stat = 'count')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'indianred', stat = 'count')
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'indianred', stat = 'count') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ex_listing <- ex_listing %>% drop_na(host_is_superhost)
ggplot(ex_listing, aes(x = host_acceptance_rate)) +
geom_histogram(fill = 'indianred', stat = 'count') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = host_acceptance_rate)) +
geom_histogram(fill = 'indianred', stat = 'count', bin = 10) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = host_acceptance_rate)) +
geom_histogram(fill = 'indianred', stat = 'count', bin = 50) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', bin = 500) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', bin = 100) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', binwidth = 10) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', binw = 10) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', bin = 10) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', bin = 100) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', bins = 100) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', bins = 1000) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', stat = 'count', bins = 50) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', bins = 50) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', bidwith = 10) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', bidwith = 5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', bidwidth = 5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', binwidth = 5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', binwidth = 10) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', binwidth = 510) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', binwidth = 50) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', binwidth = 20) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
library(plotly)
ggplot(ex_listing, aes(x = room_type)) +
geom_histogram(fill = 'indianred', binwidth = 20) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = room_type)) +
geom_histogram(fill = 'indianred', stat = 'count') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
install.packages('corr')
remotes::install_github("tidymodels/corrr")
set.seed(123)
ex_listing <- ex_listing %>%
mutate_if(is.character,funs(factor(.)))
skim_without_charts(ex_listing)
ex_listing <- listing2 %>%
select(-listing_url, -scrape_id, -last_scraped, -picture_url, -host_url, -host_thumbnail_url, -host_picture_url, -license, -description_lang, -calendar_last_scraped, -host_verifications, -host_id, -host_location, -calendar_updated, -first_review, -last_review, -availability_30, -availability_60, -availability_90, -availability_365, -has_availability, -minimum_nights, -maximum_maximum_nights, -minimum_minimum_nights, -host_name, -host_has_profile_pic, -neighbourhood, -bathrooms, -bathrooms_text, -listing_id, - latitude, -longitude, -bedrooms, -beds, -accommodates, -maximum_nights,-maximum_minimum_nights, minimum_maximum_nights, -minimum_nights_avg_ntm, maximum_nights_avg_ntm, -number_of_reviews_l30d, number_of_reviews_ltm, -review_scores_accuracy, -review_scores_checkin, -review_scores_cleanliness, -review_scores_cleanliness, -review_scores_communication, -review_scores_location, -review_scores_value, -reviews_per_month)
skim_without_charts(ex_listing)
ex_listing <- listing2 %>%
select(-listing_url, -scrape_id, -last_scraped, -picture_url, -host_url, -host_thumbnail_url, -host_picture_url, -license, -description_lang, -calendar_last_scraped, -host_verifications, -host_id, -host_location, -calendar_updated, -first_review, -last_review, -availability_30, -availability_60, -availability_90, -availability_365, -has_availability, -minimum_nights, -maximum_maximum_nights, -minimum_minimum_nights, -host_name, -host_has_profile_pic, -neighbourhood, -bathrooms, -bathrooms_text, -listing_id, - latitude, -longitude, -bedrooms, -beds, -accommodates, -maximum_nights,-maximum_minimum_nights, minimum_maximum_nights, -minimum_nights_avg_ntm, maximum_nights_avg_ntm, -number_of_reviews_l30d, number_of_reviews_ltm, -review_scores_accuracy, -review_scores_checkin, -review_scores_cleanliness, -review_scores_cleanliness, -review_scores_communication, -review_scores_location, -review_scores_value, -reviews_per_month, -decription, -name, host_about, -neighborhood_overview, -minimum_minimum_nights,-maximum_minimum_nights)
ex_listing <- listing2 %>%
select(-listing_url, -scrape_id, -last_scraped, -picture_url, -host_url, -host_thumbnail_url, -host_picture_url, -license, -description_lang, -calendar_last_scraped, -host_verifications, -host_id, -host_location, -calendar_updated, -first_review, -last_review, -availability_30, -availability_60, -availability_90, -availability_365, -has_availability, -minimum_nights, -maximum_maximum_nights, -minimum_minimum_nights, -host_name, -host_has_profile_pic, -neighbourhood, -bathrooms, -bathrooms_text, -listing_id, - latitude, -longitude, -bedrooms, -beds, -accommodates, -maximum_nights,-maximum_minimum_nights, minimum_maximum_nights, -minimum_nights_avg_ntm, maximum_nights_avg_ntm, -number_of_reviews_l30d, number_of_reviews_ltm, -review_scores_accuracy, -review_scores_checkin, -review_scores_cleanliness, -review_scores_cleanliness, -review_scores_communication, -review_scores_location, -review_scores_value, -reviews_per_month, -description, -name, host_about, -neighborhood_overview, -minimum_minimum_nights,-maximum_minimum_nights)
ex_listing <- ex_listing %>%
mutate_if(is.character,funs(factor(.)))
skim_without_charts(ex_listing)
ggcorrmat(data = ex_listing)
ggcorrmat(data = ex_listing,
colors = c("#B2182B", "white", "#4D4D4D"))
ex_listing <- listing2 %>%
select(-listing_url, -scrape_id, -last_scraped, -picture_url, -host_url, -host_thumbnail_url, -host_picture_url, -license, -description_lang, -calendar_last_scraped, -host_verifications, -host_id, -host_location, -calendar_updated, -first_review, -last_review, -availability_30, -availability_60, -availability_90, -availability_365, -has_availability, -minimum_nights, -maximum_maximum_nights, -minimum_minimum_nights, -host_name, -host_has_profile_pic, -neighbourhood, -bathrooms, -bathrooms_text, -listing_id, - latitude, -longitude, -bedrooms, -beds, -accommodates, -maximum_nights,-maximum_minimum_nights, minimum_maximum_nights, -minimum_nights_avg_ntm, maximum_nights_avg_ntm, -number_of_reviews_l30d, number_of_reviews_ltm, -review_scores_accuracy, -review_scores_checkin, -review_scores_cleanliness, -review_scores_cleanliness, -review_scores_communication, -review_scores_location, -review_scores_value, -reviews_per_month, -description, -name, host_about, -neighborhood_overview, -minimum_minimum_nights,-maximum_minimum_nights, -calculated_host_listings_count,-calculated_host_listings_count_entire_homes,-calculated_host_listings_count_private_rooms, -calculated_host_listings_count_shared_rooms)
set.seed(123)
ggcorrmat(data = ex_listing,
colors = c("#B2182B", "white", "#4D4D4D"))
fig <- plot_ly(
type='histogram',
x=room_type)
fig <- ex_listing %>% plot_ly(
type='histogram',
x=room_type)
fig <- ex_listing %>% plot_ly(
type='histogram',
x= 'room_type')
fig
fig <- ex_listing %>% plot_ly(
x= 'room_type',
type='histogram',
)
fig <- ex_listing %>% plot_ly(
x= 'room_type',
type='histogram',
)
fig <- ex_listing %>% plot_ly(
type='histogram',
x= 'room_type'
)
fig <- fig %>% add_trace(
type='histogram',
x=~'host_is_superhost')
fig <- fig %>% layout(
barmode="stack",
bargap=0.1)
fig
ggplot(ex_listing, aes(fill=host_is_superhost, y=value, x=room_type)) +
geom_bar(position = 'stack', stat = 'identity')
ggplot(ex_listing, aes(fill=host_is_superhost, y=value, x=room_type)) +
geom_bar(position = 'stack', stat = 'identity')
ggplot(ex_listing, aes(fill=host_is_superhost, y=count, x=room_type)) +
geom_bar(position = 'stack', stat = 'identity')
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=room_type)) +
geom_bar(position = 'stack', stat = 'identity')
ex_listing <- ex_listing %>% drop_na(host_is_superhost)
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'indianred', stat = 'count') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=room_type)) +
geom_bar(position = 'stack', stat = 'identity')
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=price)) +
geom_bar(position = 'stack', stat = 'identity')
splits      <- initial_split(ex_listing, prop = .6, strata = host_is_superhost)
set.seed(1234)
splits      <- initial_split(ex_listing, prop = .6, strata = host_is_superhost)
listing_other <- training(splits)
listing_test  <- testing(splits)
set.seed(1234)
splits      <- initial_split(ex_listing, prop = .6, strata = host_is_superhost)
listing_train <- training(splits)
listing_test <- testing(splits)
set.seed(1234)
splits      <- initial_split(ex_listing, prop = .6, strata = host_is_superhost)
listing_train <- training(splits)
listing_test <- testing(splits)
vfold_data <- vfold_cv(listing_train, v = 3,
repeats = 1,
strata = host_is_superhost)
vfold_data %>%
mutate(df_ana = map(splits, analysis),
df_ass = map(splits, assessment))
listing_recipe <- recipe(host_is_superhost ~ ., data = listing_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric())
listing_recipe
listing_recipe <- recipe(host_is_superhost ~ ., data = listing_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric())
listing_recipe
listing_train_preprocessed <- listing_recipe %>%
prep(listing_train) %>%
juice()
glimpse(listing_train_preprocessed)
ex_listing <- listing2 %>%
select(-listing_url, -scrape_id, -last_scraped, -picture_url, -host_url, -host_thumbnail_url, -host_picture_url, -license, -description_lang, -calendar_last_scraped, -host_verifications, -host_id, -host_location, -calendar_updated, -first_review, -last_review, -availability_30, -availability_60, -availability_90, -availability_365, -has_availability, -minimum_nights, -maximum_maximum_nights, -minimum_minimum_nights, -host_name, -host_has_profile_pic, -neighbourhood, -bathrooms, -bathrooms_text, -listing_id, - latitude, -longitude, -bedrooms, -beds, -accommodates, -maximum_nights,-maximum_minimum_nights, minimum_maximum_nights, -minimum_nights_avg_ntm, maximum_nights_avg_ntm, -number_of_reviews_l30d, number_of_reviews_ltm, -review_scores_accuracy, -review_scores_checkin, -review_scores_cleanliness, -review_scores_cleanliness, -review_scores_communication, -review_scores_location, -review_scores_value, -reviews_per_month, -description, -name, host_about, -neighborhood_overview, -minimum_minimum_nights,-maximum_minimum_nights, -calculated_host_listings_count,-calculated_host_listings_count_entire_homes,-calculated_host_listings_count_private_rooms, -calculated_host_listings_count_shared_rooms, - amenities)
listing_train_preprocessed <- listing_recipe %>%
prep(listing_train) %>%
juice()
ex_listing <- listing2 %>%
select(-listing_url, -scrape_id, -last_scraped, -picture_url, -host_url, -host_thumbnail_url, -host_picture_url, -license, -description_lang, -calendar_last_scraped, -host_verifications, -host_id, -host_location, -calendar_updated, -first_review, -last_review, -availability_30, -availability_60, -availability_90, -availability_365, -has_availability, -minimum_nights, -maximum_maximum_nights, -minimum_minimum_nights, -host_name, -host_has_profile_pic, -neighbourhood, -bathrooms, -bathrooms_text, -listing_id, - latitude, -longitude, -bedrooms, -beds, -accommodates, -maximum_nights,-maximum_minimum_nights, minimum_maximum_nights, -minimum_nights_avg_ntm, maximum_nights_avg_ntm, -number_of_reviews_l30d, number_of_reviews_ltm, -review_scores_accuracy, -review_scores_checkin, -review_scores_cleanliness, -review_scores_cleanliness, -review_scores_communication, -review_scores_location, -review_scores_value, -reviews_per_month, -description, -name, host_about, -neighborhood_overview, -minimum_minimum_nights,-maximum_minimum_nights, -calculated_host_listings_count,-calculated_host_listings_count_entire_homes,-calculated_host_listings_count_private_rooms, -calculated_host_listings_count_shared_rooms, -amenities, -host_about, -property_type, -minimum_maximum_nights, -maximum_maximum_nights)
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=host_response_time)) +
geom_bar(position = 'stack', stat = 'identity')
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=host_response_time)) +
geom_bar(position = 'stack', stat = 'identity') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ex_listing <- ex_listing %>%
mutate_if(is.character,funs(factor(.)))
skim_without_charts(ex_listing)
ex_listing <- ex_listing %>% drop_na(host_is_superhost)
ggplot(ex_listing, aes(x = host_is_superhost)) +
geom_histogram(fill = 'indianred', stat = 'count') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = price)) +
geom_histogram(fill = 'indianred', binwidth = 20) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(ex_listing, aes(x = room_type)) +
geom_histogram(fill = 'indianred', stat = 'count') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
set.seed(123)
ggcorrmat(data = ex_listing,
colors = c("#B2182B", "white", "#4D4D4D"))
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=room_type)) +
geom_bar(position = 'stack', stat = 'identity')
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=host_response_time)) +
geom_bar(position = 'stack', stat = 'identity') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
set.seed(1234)
splits      <- initial_split(ex_listing, prop = .6, strata = host_is_superhost)
listing_train <- training(splits)
listing_test <- testing(splits)
vfold_data <- vfold_cv(listing_train, v = 3,
repeats = 1,
strata = host_is_superhost)
vfold_data %>%
mutate(df_ana = map(splits, analysis),
df_ass = map(splits, assessment))
listing_recipe <- recipe(host_is_superhost ~ ., data = listing_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric())
listing_recipe
listing_train_preprocessed <- listing_recipe %>%
prep(listing_train) %>%
juice()
glimpse(listing_train_preprocessed)
ggplot(ex_listing, aes(fill=host_is_superhost, y=host_is_superhost, x=host_response_time)) +
geom_bar(position = 'stack', stat = 'identity') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
set.seed(seed = 1972)
train_test_split <-
rsample::initial_split(
data = ex_listing,
prop = 0.80
)
train_test_split
## <5626/1406/7032>
train_tbl <- train_test_split %>% training()
test_tbl  <- train_test_split %>% testing()
train_baked <- bake(recipe_prepped, new_data = train_tbl)
recipe_simple <- function(dataset) {
recipe(host_is_superhost ~ ., data = ex_listing) %>%
step_string2factor(all_nominal(), -all_outcomes()) %>%
prep(data = dataset)
}
recipe_prepped <- recipe_simple(dataset = train_tbl)
train_baked <- bake(recipe_prepped, new_data = train_tbl)
test_baked  <- bake(recipe_prepped, new_data = test_tbl)
train_baked <- bake(recipe_prepped, new_data = train_tbl)
test_baked  <- bake(recipe_prepped, new_data = test_tbl)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(host_is_superhost ~ ., data = train_baked)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(host_is_superhost ~ ., data = train_baked)
logistic_glm <-
logistic_reg(mode = "regression") %>%
set_engine("glm") %>%
fit(host_is_superhost ~ ., data = train_baked)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(host_is_superhost ~ ., data = train_baked)
ex_listing <- ex_listing %>%
mutate(host_is_superhost = factor(host_is_superhost))
set.seed(seed = 1972)
train_test_split <-
rsample::initial_split(
data = ex_listing,
prop = 0.80
)
train_test_split
## <5626/1406/7032>
train_tbl <- train_test_split %>% training()
test_tbl  <- train_test_split %>% testing()
recipe_prepped <- recipe_simple(dataset = train_tbl)
train_baked <- bake(recipe_prepped, new_data = train_tbl)
test_baked  <- bake(recipe_prepped, new_data = test_tbl)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(host_is_superhost ~ ., data = train_baked)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("glmnet") %>%
fit(host_is_superhost ~ ., data = train_baked)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("stan") %>%
fit(host_is_superhost ~ ., data = train_baked)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("keras") %>%
fit(host_is_superhost ~ ., data = train_baked)
installed.packages('keras','stan')
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("keras") %>%
fit(host_is_superhost ~ ., data = train_baked)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(host_is_superhost ~ ., data = train_baked)
